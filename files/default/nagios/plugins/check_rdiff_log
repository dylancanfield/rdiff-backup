#!/bin/bash

read -d ' ' -a JOBS <<< "`ls -c /home/rdiff-backup-server/scripts`" # Array of all jobs

# Note: We manage the failure of new jobs differently than the failure of other
# jobs because the rdiff-backup cookbook does not create Nagios checks for jobs
# until after their first run (because otherwise it would just be critical
# because the repo doesn't exist yet).  If a normal job fails, this check will
# still return OK status because the job already has its own check that will
# send a CRITICAL alert.  In this case, this check simply serves as a basic
# "overview" check, and the job-specific check for any normal failed jobs (or
# the logs) should be consulted for details).  This check only returns CRITICAL
# status if a purge or a job that doesn't already have a Nagios check (i.e. a
# new job on its first run).  Purges are not differentiated because none of
# them have their own Nagios check, and so every failed purge is worth
# reporting a CRITICAL status for.

# Backup jobs
TOTAL=${#JOBS[@]}   # Total number of jobs
SUCC=0              # Number of jobs whose last run succeeded.
NORMFAIL=0          # Number of existing jobs (that already have Nagios checks) whose last run failed.
FIRSTFAIL=0         # Number of new jobs (that do not already have Nagios checks) whose first/last run failed.
MISSING=0           # Number of jobs that did not finish at all (or were never run).

# Purges
PTOTAL=${#JOBS[@]}  # Total number of purges
PSUCC=0             # Number of jobs whose last purge succeeded.
PFAIL=0             # Number of jobs whose last purge failed.
PMISSING=0          # Number of jobs whose last purge did not finish at all.

LOGS=`ls /var/log/rdiff-backup/general/* | tail -n 2 | xargs` # Last 2 logs

for JOB in ${JOBS[@]}; do

  # Backup jobs
  JOBSTATUS=`grep $JOB $LOGS | grep -Ei 'backup (complete|failed)' | tail -n 1`
  if [ `echo $JOBSTATUS | grep -q 'Backup complete'; echo $?` -eq 0 ]; then
    SUCC=`expr $SUCC + 1`;
  elif [ `echo $JOBSTATUS | grep -q 'Backup failed'; echo $?` -eq 0 ]; then
    NORMFAILJOBS[$NORMFAIL]=$JOB
    NORMFAIL=`expr $NORMFAIL + 1`;
  elif [ `echo $JOBSTATUS | grep -q 'First backup failed'; echo $?` -eq 0 ]; then
    FIRSTFAILJOBS[$FIRSTFAIL]=$JOB
    FIRSTFAIL=`expr $FIRSTFAIL + 1`;
  else
    MISSINGJOBS[$MISSING]=$JOB
    MISSING=`expr $MISSING + 1`;
  fi

  # Purges
  JOBSTATUS=`grep $JOB $LOGS | grep -Ei 'purge (complete|failed)' | tail -n 1`
  if [ `echo $JOBSTATUS | grep -q 'Purge complete'; echo $?` -eq 0 ]; then
    PSUCC=`expr $PSUCC + 1`;
  elif [ `echo $JOBSTATUS | grep -q 'Purge failed'; echo $?` -eq 0 ]; then
    PFAILJOBS[$PFAIL]=$JOB
    PFAIL=`expr $PFAIL + 1`;
  else
    PMISSINGJOBS[$PMISSING]=$JOB
    PMISSING=`expr $PMISSING + 1`;
  fi
done

STATUS="UNKNOWN:"
MESSAGE="$SUCC/$TOTAL backup(s) succeeded"
if [ $TOTAL -eq $SUCC -a $PTOTAL -eq $PSUCC ]; then
  STATUS="OK:"
fi
if [ $NORMFAIL -ne 0 ]; then
  STATUS="OK:"
  MESSAGE="${MESSAGE}; $NORMFAIL existing backup(s) failed ( "
  for NORMFAILJOB in ${NORMFAILJOBS[@]}; do
    MESSAGE="${MESSAGE}${NORMFAILJOB} "
  done
  MESSAGE="${MESSAGE})"
fi
if [ $MISSING -ne 0 ]; then
  STATUS="WARNING:"
  MESSAGE="${MESSAGE}; $MISSING backup(s) are missing ( "
  for MISSINGJOB in ${MISSINGJOBS[@]}; do
    MESSAGE="${MESSAGE}${MISSINGJOB} "
  done
  MESSAGE="${MESSAGE})"
fi
if [ $PMISSING -ne 0 ]; then
  STATUS="WARNING:"
  MESSAGE="${MESSAGE}; $PMISSING purge(s) are missing ( "
  for PMISSINGJOB in ${PMISSINGJOBS[@]}; do
    MESSAGE="${MESSAGE}${PMISSINGJOB} "
  done
  MESSAGE="${MESSAGE})"
fi
if [ $FIRSTFAIL -ne 0 ]; then
  STATUS="CRITICAL:"
  MESSAGE="${MESSAGE}; $FIRSTFAIL first backup(s) failed ( "
  for FIRSTFAILJOB in ${FIRSTFAILJOBS[@]}; do
    MESSAGE="${MESSAGE}${FIRSTFAILJOB} "
  done
  MESSAGE="${MESSAGE})"
fi
if [ $PFAIL -ne 0 ]; then
  STATUS="CRITICAL:"
  MESSAGE="${MESSAGE}; $PFAIL purge(s) failed ( "
  for PFAILJOB in ${PFAILJOBS[@]}; do
    MESSAGE="${MESSAGE}${PFAILJOB} "
  done
  MESSAGE="${MESSAGE})"
fi

echo "$STATUS $MESSAGE"
if [ $STATUS = "OK:" ]; then
  exit 0
elif [ $STATUS = "WARNING:" ]; then
  exit 1
elif [ $STATUS = "CRITICAL:" ]; then
  exit 2
else
  exit 3
fi
